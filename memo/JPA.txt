ORM(Object Relational Mapping)
 객체 진영과 RDB 진영을 자동으로 매핑하여 구조의 불일치를 개발자 대신 해결해주는 기술의 총칭이다.
 객체 지향 구조에서 프로그래밍 언어를 사용하여 RDB의 데이터를 조작하는 방법이다.
 ORM을 사용하면 개발자가 SQL문을 직접 작성하지 않아도 RDB와 상호 작용할 수 있다.

JPA(Java Persistence API)
 ORM을 사용하기 위한 설계도(틀)이다.
 Java Application용 RDB 매핑 관리를 위한 인터페이스이며, DBMS 벤더사에 의존하지 않고 독립적으로
 ORM을 사용할 수 있는 ORM 표준이다. 인터페이스이기 때문에 구현되어 있지 않은 틀만 제공하며,
 자체적인 작업을 수행하지 않는다. JPA에 설계된 구조에 맞춰서 각 메소드를 재정의하여 
 직접 ORM을 구현하여 사용한다. JPA는 ORM을 사용할 수 있는 ORM 접근 방식이며, 구현되지 않은
 JPA를 ORM이라고 말하기는 어렵다.

Hibernate Framework
 모든 Java Application에 대해 객체 관계를 그대로 유지한 채 쿼리 서비스를 제공하는 오픈 소스의 경량 ORM이다.
 JPA를 구현한 구현체이며, 여러 구현체 중 가장 대표적인 구현체이다.
 객체 간 관계 구성을 지원하며, 상속, 지연성, 페이징 처리, 예외 처리 불필요를 지원한다.

Spring Data JPA
 JPA를 추상화한 Repository 인터페이스를 제공하여 JPA를 쓰기 편하게 다양한 기능을 지원한다.
 내부적으로는 JPA를 사용하기 때문에 JPA를 모르면 내부 구조를 이해하기 힘들 수 있다.

-------------------------------------------------------------------------------------------------------------

객체와 관계형 데이터베이스의 차이

1. 상속

 ▶ RDB의 상속

	[개발자]		[기획자]

	번호			번호
	-----------		-----------
	이름			이름
	생년월일		생년월일
	경력			경력
	기술등급		OA등급
	프로젝트 수		클라이언트 수

 또는

	[사원]

	번호
	-----------
	이름
	생년월일
	경력
	기술등급
	OA등급
	프로젝트 수
	클라이언트 수

또는

	[사원] - 슈퍼

	번호(PK)
	-----------	
	이름
	생년월일
	경력

	[개발자] - 서브	[기획자] - 서브

	번호(PK, FK)		번호(PK, FK)
	-----------		-----------
	기술등급		OA등급
	프로젝트 수		클라이언트 수

	1:1 관계에서 INSERT를 하기 위해서는 쿼리를 2번 작성해야하는 불편함이 생긴다.
	게다가 SELECT를 하기 위해서는 JOIN을 사용해야 하는데 쿼리가 굉장히 복잡해진다.
	만약에 이런 RDB의 테이블 관계를 자바 컬렉션으로 바꿀 수 있다면,

 ▶ 컬렉션 사용

	Developer developer = list.get(developerId);
	위와 같이 간단하게 조회할 수 있다.

2. 연관관계
	
 ▶ 객체 연관 관계: 단방향으로 흘러간다(Flower에서 Pot접근은 가능, Pot에서 Flower접근 불가능)
	
	Flower	→	Pot
	
	id			id
	name			shape
	Pot pot		color


 ▶ RDB 연관 관계: 양방향으로 흘러간다(FLOWER에서 POT을, POT에서 FLOWER를 접근할 수 있다)

	FLOWER	↔	POT

	ID(PK)		ID(PK)
	--------		--------
	NAME			SHAPE
	POT_ID(FK)		COLOR


 ▶ RDB 중심 설계
	
	class Flower{
		Long id;
		String name;
		String potId; //FK는 RDB방식에서의 연관관계이기 때문에 객체방식으로 바꿔야 함.
	}

	RDB 방식으로 설계하면, 조회 시 JOIN을 하여 FLOWER테이블과 POT테이블에서 각각 필요한 정보를 가져와
	각 객체에 담아주거나 DTO에 담아주어야 한다.

 ▶ 객체 중심 설계

	class Flower{
		Long id;
		String name;
		Pot pot; // 참조로 연관관계를 맺도록 함.
	}

	flower.setPot(pot)형태와 같이 복잡하게 작업해야 한다.

 ▶ 컬렉션 사용

	하지만 만약 자바 컬렉션으로 관리가 가능하다면,

	list.add(flower);
	Flower flower = list.get(flowerId);
	Pot pot = flower.getPot();

	훨씬 편하게 작업이 가능하다.

3. 그래프 탐색

	┌─Market────┐
	│           │
Client──Order Flower──Pot
	│
	Delivery  

	객체는 모든 객체 그래프를 탐색할 수 있어야 한다.

	하지만 SQL 작성 시 이미 탐색 범위가 결정된다.
	만약 Market과 Flower를 JOIN해서 조회를 한다면,
	market.getFlower()는 사용 가능하지만
	market.getPot()는 null일 수 밖에 없다.

	따라서 엔티티에 대한 신뢰가 무너질 수 밖에 없다.

	Market market = marketDAO.findById(marketId);
	market.getFlower(); // null이 아니라고 확신할 수 없다.
	market.getOrder().getClient(); // null이 아니라고 확신할 수 없다.

	marketDAO에 있는 findById()를 분석하지 않는 이상 각 엔티티에 대해 신뢰할 수 없다.
	따라서 상황에 따라 조회에 대한 메소드를 여러 개 선언해놓아야 한다.

	marketDAO.getFlower();
	marketDAO.getOrderWithClient();
	marketDAO.getOrderWithClientWithDelivery();
	...

	하지만 위와 같은 방법은 사실상 불가능에 가깝다.

4. 값 비교
	SQL 실행 결과를 담은 뒤 생성자를 호출하여 객체에 담으면 매번 new가 사용되기 때문에
	동일한 조회 결과의 객체일지라도 주소가 모두 다르다.

 ▶ 컬렉션 사용

	하지만 만약 자바 컬렉션에서 객체 조회가 가능하다면
	list.get(memberId) == list.get(memberId);

※ 1.2.3.4. 결론

	즉, 객체지향으로 설계할 수록 작업이 오히려 복잡해지고 늘어나기 때문에 RDB 중심으로 설계할 수밖에 없다.
	RDB를 자바 컬렉션에 저장하듯 사용하면 굉장히 편해지고 많은 문제가 해결되는데,
	바로 이 기술을 JPA라고 한다.

-------------------------------------------------------------------------------------------------------------

JPA를 사용해야 하는 이유
	1. SQL 중심 개발에서 객체 중심으로 개발

	2. 생산성
		저장: jpa.persist(market);
		조회: jpa.findById(marketId);
		수정: market.setMarketName("이마트");
		삭제: jpa.remove(market);

	3. 유지보수
		클라이언트가 새로운 필드를 요청하여 새로운 필드 추가 시
		클래스 안에 필드만 한 개 추가하면 끝. SQL문을 수정할 필요 없음.

	4. 패러다임의 불일치 해결

		▶ JPA와 상속
		 
		 Employee		Developer extends Employee

		 employeeId		developerId
		 employeeName	developerLevel
					developerProjectCount


		 - INSERT
		
			▷ 개발자
				jpa.persist(developer);

			▷ JPA
				INSERT 두 번 해줌.

			자식 필드에 부모 필드가 포함되어 있기 때문에 필요한 데이터를 자식 객체에 채우기만 하면 됨.

		 - SELECT
			
			▷ 개발자
				jpa.findById(Developer.class, developerId);

			▷ JPA
				부모 테이블과 JOIN해서 데이터를 가져옴

		▶ JPA와 연관관계
		
		 Flower	→	Pot
	
		 id			id
		 name			shape
		 Pot pot		color

		 flower.setPot(pot);
		 jpa.persist(flower);

		 jpa.findById(Flower.class, flowerId);

		▶ JPA와 객체 그래프 탐색

		 	 ┌─Market────┐
		 	 │           │
	 	 Client──Order	Flower──Pot
		 	 │
		 	 Delivery  

	
		 Flower flower = jpa.findById(Flower.class, flowerId);
		 Pot pot = flower.getPot();
		 market.getOrder().getClient();

		 ※ SELECT 결과가 없으면 문제가 생기기 때문에 NPE 체크는 반드시 해야한다.

		▶ JPA와 값 비교
			
			Market market1 = jpa.findById(Market.class, marketId);
			Market market2 = jpa.findById(Market.class, marketId);

			market1 == market2;

			동일한 트랜잭션에서 조회한 엔티티는 무조건 같다.

-------------------------------------------------------------------------------------------------------------

			














